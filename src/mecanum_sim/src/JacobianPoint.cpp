#include <iostream>
#include <JacobianPoint.h>
using namespace std;

void JacobianPoint::calcJacobianWhole()
{
cv::Mat JacobianWhole_(6, 9, CV_64FC1);
	JacobianWhole_.at<double>(0, 0) = sin(ph)*((1476649253021493*sin(q1))/9007199254740992 - (153*cos(q1)*cos(q2))/250 + (461*cos(q5)*sin(q1))/5000 - (461*cos(q2 + q3 + q4)*cos(q1)*sin(q5))/5000 + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - cos(ph)*((1476649253021493*cos(q1))/9007199254740992 + (461*cos(q1)*cos(q5))/5000 + (153*cos(q2)*sin(q1))/250 - (5723*sin(q1)*sin(q2)*sin(q3))/10000 + (461*cos(q2 + q3 + q4)*sin(q1)*sin(q5))/5000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
	JacobianWhole_.at<double>(0, 1) = -(cos(ph + q1)*(1157*cos(q2 + q3 + q4) - 461*cos(q2 + q3 + q4 + q5) + 5723*sin(q2 + q3) + 6120*sin(q2) + 461*cos(q2 + q3 + q4 - q5)))/10000;
	JacobianWhole_.at<double>(0, 2) = -(cos(ph + q1)*(1157*cos(q2 + q3 + q4) - 461*cos(q2 + q3 + q4 + q5) + 5723*sin(q2 + q3) + 461*cos(q2 + q3 + q4 - q5)))/10000;
	JacobianWhole_.at<double>(0, 3) = -(cos(ph + q1)*(922*sin(q2 + q3 + q4)*sin(q5) + 1157*cos(q2 + q3)*cos(q4) - 1157*sin(q2 + q3)*sin(q4)))/10000;
	JacobianWhole_.at<double>(0, 4) = cos(ph)*((461*sin(q1)*sin(q5))/5000 + (461*cos(q2 + q3 + q4)*cos(q1)*cos(q5))/5000) + sin(ph)*((461*cos(q1)*sin(q5))/5000 - (461*cos(q2 + q3 + q4)*cos(q5)*sin(q1))/5000);
	JacobianWhole_.at<double>(0, 5) = 0;
	JacobianWhole_.at<double>(0, 6) = sin(ph)*((1476649253021493*sin(q1))/9007199254740992 - a - (153*cos(q1)*cos(q2))/250 + (461*cos(q5)*sin(q1))/5000 - (461*cos(q2 + q3 + q4)*cos(q1)*sin(q5))/5000 + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - cos(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (461*cos(q1)*cos(q5))/5000 + (153*cos(q2)*sin(q1))/250 - (5723*sin(q1)*sin(q2)*sin(q3))/10000 + (461*cos(q2 + q3 + q4)*sin(q1)*sin(q5))/5000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
	JacobianWhole_.at<double>(0, 7) = 1;
	JacobianWhole_.at<double>(0, 8) = 0;
	JacobianWhole_.at<double>(1, 0) = - cos(ph)*((1476649253021493*sin(q1))/9007199254740992 - (153*cos(q1)*cos(q2))/250 + (461*cos(q5)*sin(q1))/5000 - (461*cos(q2 + q3 + q4)*cos(q1)*sin(q5))/5000 + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - sin(ph)*((1476649253021493*cos(q1))/9007199254740992 + (461*cos(q1)*cos(q5))/5000 + (153*cos(q2)*sin(q1))/250 - (5723*sin(q1)*sin(q2)*sin(q3))/10000 + (461*cos(q2 + q3 + q4)*sin(q1)*sin(q5))/5000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
	JacobianWhole_.at<double>(1, 1) = -(sin(ph + q1)*(1157*cos(q2 + q3 + q4) - 461*cos(q2 + q3 + q4 + q5) + 5723*sin(q2 + q3) + 6120*sin(q2) + 461*cos(q2 + q3 + q4 - q5)))/10000;
	JacobianWhole_.at<double>(1, 2) = -(sin(ph + q1)*(1157*cos(q2 + q3 + q4) - 461*cos(q2 + q3 + q4 + q5) + 5723*sin(q2 + q3) + 461*cos(q2 + q3 + q4 - q5)))/10000;
	JacobianWhole_.at<double>(1, 3) = -(sin(ph + q1)*(922*sin(q2 + q3 + q4)*sin(q5) + 1157*cos(q2 + q3)*cos(q4) - 1157*sin(q2 + q3)*sin(q4)))/10000;
	JacobianWhole_.at<double>(1, 4) = sin(ph)*((461*sin(q1)*sin(q5))/5000 + (461*cos(q2 + q3 + q4)*cos(q1)*cos(q5))/5000) - cos(ph)*((461*cos(q1)*sin(q5))/5000 - (461*cos(q2 + q3 + q4)*cos(q5)*sin(q1))/5000);
	JacobianWhole_.at<double>(1, 5) = 0;
	JacobianWhole_.at<double>(1, 6) = - sin(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (461*cos(q1)*cos(q5))/5000 + (153*cos(q2)*sin(q1))/250 - (5723*sin(q1)*sin(q2)*sin(q3))/10000 + (461*cos(q2 + q3 + q4)*sin(q1)*sin(q5))/5000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 + (5723*cos(q2)*cos(q3)*sin(q1))/10000) - cos(ph)*((1476649253021493*sin(q1))/9007199254740992 - a - (153*cos(q1)*cos(q2))/250 + (461*cos(q5)*sin(q1))/5000 - (461*cos(q2 + q3 + q4)*cos(q1)*sin(q5))/5000 + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000);
	JacobianWhole_.at<double>(1, 7) = 0;
	JacobianWhole_.at<double>(1, 8) = 1;
	JacobianWhole_.at<double>(2, 0) = 0;
	JacobianWhole_.at<double>(2, 1) = (1157*cos(q2 + q3)*sin(q4))/10000 - (153*cos(q2))/250 - sin(q5)*((461*cos(q2 + q3)*cos(q4))/5000 - (461*sin(q2 + q3)*sin(q4))/5000) - (5723*cos(q2 + q3))/10000 + (1157*sin(q2 + q3)*cos(q4))/10000;
	JacobianWhole_.at<double>(2, 2) = (1157*sin(q2 + q3 + q4))/10000 - (5723*cos(q2 + q3))/10000 - (461*cos(q2 + q3 + q4)*sin(q5))/5000;
	JacobianWhole_.at<double>(2, 3) = (1157*sin(q2 + q3 + q4))/10000 - (461*cos(q2 + q3 + q4)*sin(q5))/5000;
	JacobianWhole_.at<double>(2, 4) = -(461*sin(q2 + q3 + q4)*cos(q5))/5000;
	JacobianWhole_.at<double>(2, 5) = 0;
	JacobianWhole_.at<double>(2, 6) = 0;
	JacobianWhole_.at<double>(2, 7) = 0;
	JacobianWhole_.at<double>(2, 8) = 0;
	JacobianWhole_.at<double>(3, 0) = 0;
	JacobianWhole_.at<double>(3, 1) = -sin(ph + q1);
	JacobianWhole_.at<double>(3, 2) = -sin(ph + q1);
	JacobianWhole_.at<double>(3, 3) = -sin(ph + q1);
	JacobianWhole_.at<double>(3, 4) = -sin(q2 + q3 + q4)*cos(ph + q1);
	JacobianWhole_.at<double>(3, 5) = - cos(ph)*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5)) - sin(ph)*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5));
	JacobianWhole_.at<double>(3, 6) = 0;
	JacobianWhole_.at<double>(3, 7) = 0;
	JacobianWhole_.at<double>(3, 8) = 0;
	JacobianWhole_.at<double>(4, 0) = 0;
	JacobianWhole_.at<double>(4, 1) = cos(ph + q1);
	JacobianWhole_.at<double>(4, 2) = cos(ph + q1);
	JacobianWhole_.at<double>(4, 3) = cos(ph + q1);
	JacobianWhole_.at<double>(4, 4) = -sin(q2 + q3 + q4)*sin(ph + q1);
	JacobianWhole_.at<double>(4, 5) = cos(ph)*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5)) - sin(ph)*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5));
	JacobianWhole_.at<double>(4, 6) = 0;
	JacobianWhole_.at<double>(4, 7) = 0;
	JacobianWhole_.at<double>(4, 8) = 0;
	JacobianWhole_.at<double>(5, 0) = 1;
	JacobianWhole_.at<double>(5, 1) = 0;
	JacobianWhole_.at<double>(5, 2) = 0;
	JacobianWhole_.at<double>(5, 3) = 0;
	JacobianWhole_.at<double>(5, 4) = -cos(q2 + q3 + q4);
	JacobianWhole_.at<double>(5, 5) = -sin(q2 + q3 + q4)*sin(q5);
	JacobianWhole_.at<double>(5, 6) = 1;
	JacobianWhole_.at<double>(5, 7) = 0;
	JacobianWhole_.at<double>(5, 8) = 0;
	JacobianWhole = JacobianWhole_;
}

void JacobianPoint::calcJacobianNear()
{
cv::Mat JacobianNear_(6, 9, CV_64FC1);
	switch(num){
    case 0:
        JacobianNear_.at<double>(0, 0) = 0;
        JacobianNear_.at<double>(0, 1) = 0;
        JacobianNear_.at<double>(0, 2) = 0;
        JacobianNear_.at<double>(0, 3) = 0;
        JacobianNear_.at<double>(0, 4) = 0;
        JacobianNear_.at<double>(0, 5) = 0;
        JacobianNear_.at<double>(0, 6) = -x*sin(ph)-y*cos(ph);
        JacobianNear_.at<double>(0, 7) = 1;
        JacobianNear_.at<double>(0, 8) = 0;
        JacobianNear_.at<double>(1, 0) = 0;
        JacobianNear_.at<double>(1, 1) = 0;
        JacobianNear_.at<double>(1, 2) = 0;
        JacobianNear_.at<double>(1, 3) = 0;
        JacobianNear_.at<double>(1, 4) = 0;
        JacobianNear_.at<double>(1, 5) = 0;
        JacobianNear_.at<double>(1, 6) = x*cos(ph)-y*sin(ph);
        JacobianNear_.at<double>(1, 7) = 0;
        JacobianNear_.at<double>(1, 8) = 1;
        JacobianNear_.at<double>(2, 0) = 0;
        JacobianNear_.at<double>(2, 1) = 0;
        JacobianNear_.at<double>(2, 2) = 0;
        JacobianNear_.at<double>(2, 3) = 0;
        JacobianNear_.at<double>(2, 4) = 0;
        JacobianNear_.at<double>(2, 5) = 0;
        JacobianNear_.at<double>(2, 6) = 0;
        JacobianNear_.at<double>(2, 7) = 0;
        JacobianNear_.at<double>(2, 8) = 0;
        JacobianNear_.at<double>(3, 0) = 0;
        JacobianNear_.at<double>(3, 1) = 0;
        JacobianNear_.at<double>(3, 2) = 0;
        JacobianNear_.at<double>(3, 3) = 0;
        JacobianNear_.at<double>(3, 4) = 0;
        JacobianNear_.at<double>(3, 5) = 0;
        JacobianNear_.at<double>(3, 6) = 0;
        JacobianNear_.at<double>(3, 7) = 0;
        JacobianNear_.at<double>(3, 8) = 0;
        JacobianNear_.at<double>(4, 0) = 0;
        JacobianNear_.at<double>(4, 1) = 0;
        JacobianNear_.at<double>(4, 2) = 0;
        JacobianNear_.at<double>(4, 3) = 0;
        JacobianNear_.at<double>(4, 4) = 0;
        JacobianNear_.at<double>(4, 5) = 0;
        JacobianNear_.at<double>(4, 6) = 0;
        JacobianNear_.at<double>(4, 7) = 0;
        JacobianNear_.at<double>(4, 8) = 0;
        JacobianNear_.at<double>(5, 0) = 0;
        JacobianNear_.at<double>(5, 1) = 0;
        JacobianNear_.at<double>(5, 2) = 0;
        JacobianNear_.at<double>(5, 3) = 0;
        JacobianNear_.at<double>(5, 4) = 0;
        JacobianNear_.at<double>(5, 5) = 0;
        JacobianNear_.at<double>(5, 6) = 1;
        JacobianNear_.at<double>(5, 7) = 0;
        JacobianNear_.at<double>(5, 8) = 0;
    break;
	case 1:
		JacobianNear_.at<double>(0, 0) = y*cos(ph + q1) + x*sin(ph + q1);
		JacobianNear_.at<double>(0, 1) = 0;
		JacobianNear_.at<double>(0, 2) = 0;
		JacobianNear_.at<double>(0, 3) = 0;
		JacobianNear_.at<double>(0, 4) = 0;
		JacobianNear_.at<double>(0, 5) = 0;
		JacobianNear_.at<double>(0, 6) = cos(ph)*(y*cos(q1) - b + x*sin(q1)) - sin(ph)*(a - x*cos(q1) + y*sin(q1));
		JacobianNear_.at<double>(0, 7) = 1;
		JacobianNear_.at<double>(0, 8) = 0;
		JacobianNear_.at<double>(1, 0) = y*sin(ph + q1) - x*cos(ph + q1);
		JacobianNear_.at<double>(1, 1) = 0;
		JacobianNear_.at<double>(1, 2) = 0;
		JacobianNear_.at<double>(1, 3) = 0;
		JacobianNear_.at<double>(1, 4) = 0;
		JacobianNear_.at<double>(1, 5) = 0;
		JacobianNear_.at<double>(1, 6) = cos(ph)*(a - x*cos(q1) + y*sin(q1)) + sin(ph)*(y*cos(q1) - b + x*sin(q1));
		JacobianNear_.at<double>(1, 7) = 0;
		JacobianNear_.at<double>(1, 8) = 1;
		JacobianNear_.at<double>(2, 0) = 0;
		JacobianNear_.at<double>(2, 1) = 0;
		JacobianNear_.at<double>(2, 2) = 0;
		JacobianNear_.at<double>(2, 3) = 0;
		JacobianNear_.at<double>(2, 4) = 0;
		JacobianNear_.at<double>(2, 5) = 0;
		JacobianNear_.at<double>(2, 6) = 0;
		JacobianNear_.at<double>(2, 7) = 0;
		JacobianNear_.at<double>(2, 8) = 0;
		JacobianNear_.at<double>(3, 0) = 0;
		JacobianNear_.at<double>(3, 1) = 0;
		JacobianNear_.at<double>(3, 2) = 0;
		JacobianNear_.at<double>(3, 3) = 0;
		JacobianNear_.at<double>(3, 4) = 0;
		JacobianNear_.at<double>(3, 5) = 0;
		JacobianNear_.at<double>(3, 6) = 0;
		JacobianNear_.at<double>(3, 7) = 0;
		JacobianNear_.at<double>(3, 8) = 0;
		JacobianNear_.at<double>(4, 0) = 0;
		JacobianNear_.at<double>(4, 1) = 0;
		JacobianNear_.at<double>(4, 2) = 0;
		JacobianNear_.at<double>(4, 3) = 0;
		JacobianNear_.at<double>(4, 4) = 0;
		JacobianNear_.at<double>(4, 5) = 0;
		JacobianNear_.at<double>(4, 6) = 0;
		JacobianNear_.at<double>(4, 7) = 0;
		JacobianNear_.at<double>(4, 8) = 0;
		JacobianNear_.at<double>(5, 0) = 1;
		JacobianNear_.at<double>(5, 1) = 0;
		JacobianNear_.at<double>(5, 2) = 0;
		JacobianNear_.at<double>(5, 3) = 0;
		JacobianNear_.at<double>(5, 4) = 0;
		JacobianNear_.at<double>(5, 5) = 0;
		JacobianNear_.at<double>(5, 6) = 1;
		JacobianNear_.at<double>(5, 7) = 0;
		JacobianNear_.at<double>(5, 8) = 0;
	break;
	case 2:
		JacobianNear_.at<double>(0, 0) = sin(ph)*(z*sin(q1) + x*cos(q1)*cos(q2) - y*cos(q1)*sin(q2)) - cos(ph)*(z*cos(q1) - x*cos(q2)*sin(q1) + y*sin(q1)*sin(q2));
		JacobianNear_.at<double>(0, 1) = cos(ph + q1)*(y*cos(q2) + x*sin(q2));
		JacobianNear_.at<double>(0, 2) = 0;
		JacobianNear_.at<double>(0, 3) = 0;
		JacobianNear_.at<double>(0, 4) = 0;
		JacobianNear_.at<double>(0, 5) = 0;
		JacobianNear_.at<double>(0, 6) = - sin(ph)*(a - z*sin(q1) - x*cos(q1)*cos(q2) + y*cos(q1)*sin(q2)) - cos(ph)*(b + z*cos(q1) - x*cos(q2)*sin(q1) + y*sin(q1)*sin(q2));
		JacobianNear_.at<double>(0, 7) = 1;
		JacobianNear_.at<double>(0, 8) = 0;
		JacobianNear_.at<double>(1, 0) = - cos(ph)*(z*sin(q1) + x*cos(q1)*cos(q2) - y*cos(q1)*sin(q2)) - sin(ph)*(z*cos(q1) - x*cos(q2)*sin(q1) + y*sin(q1)*sin(q2));
		JacobianNear_.at<double>(1, 1) = sin(ph + q1)*(y*cos(q2) + x*sin(q2));
		JacobianNear_.at<double>(1, 2) = 0;
		JacobianNear_.at<double>(1, 3) = 0;
		JacobianNear_.at<double>(1, 4) = 0;
		JacobianNear_.at<double>(1, 5) = 0;
		JacobianNear_.at<double>(1, 6) = cos(ph)*(a - z*sin(q1) - x*cos(q1)*cos(q2) + y*cos(q1)*sin(q2)) - sin(ph)*(b + z*cos(q1) - x*cos(q2)*sin(q1) + y*sin(q1)*sin(q2));
		JacobianNear_.at<double>(1, 7) = 0;
		JacobianNear_.at<double>(1, 8) = 1;
		JacobianNear_.at<double>(2, 0) = 0;
		JacobianNear_.at<double>(2, 1) = x*cos(q2) - y*sin(q2);
		JacobianNear_.at<double>(2, 2) = 0;
		JacobianNear_.at<double>(2, 3) = 0;
		JacobianNear_.at<double>(2, 4) = 0;
		JacobianNear_.at<double>(2, 5) = 0;
		JacobianNear_.at<double>(2, 6) = 0;
		JacobianNear_.at<double>(2, 7) = 0;
		JacobianNear_.at<double>(2, 8) = 0;
		JacobianNear_.at<double>(3, 0) = 0;
		JacobianNear_.at<double>(3, 1) = -sin(ph + q1);
		JacobianNear_.at<double>(3, 2) = 0;
		JacobianNear_.at<double>(3, 3) = 0;
		JacobianNear_.at<double>(3, 4) = 0;
		JacobianNear_.at<double>(3, 5) = 0;
		JacobianNear_.at<double>(3, 6) = 0;
		JacobianNear_.at<double>(3, 7) = 0;
		JacobianNear_.at<double>(3, 8) = 0;
		JacobianNear_.at<double>(4, 0) = 0;
		JacobianNear_.at<double>(4, 1) = cos(ph + q1);
		JacobianNear_.at<double>(4, 2) = 0;
		JacobianNear_.at<double>(4, 3) = 0;
		JacobianNear_.at<double>(4, 4) = 0;
		JacobianNear_.at<double>(4, 5) = 0;
		JacobianNear_.at<double>(4, 6) = 0;
		JacobianNear_.at<double>(4, 7) = 0;
		JacobianNear_.at<double>(4, 8) = 0;
		JacobianNear_.at<double>(5, 0) = 1;
		JacobianNear_.at<double>(5, 1) = 0;
		JacobianNear_.at<double>(5, 2) = 0;
		JacobianNear_.at<double>(5, 3) = 0;
		JacobianNear_.at<double>(5, 4) = 0;
		JacobianNear_.at<double>(5, 5) = 0;
		JacobianNear_.at<double>(5, 6) = 1;
		JacobianNear_.at<double>(5, 7) = 0;
		JacobianNear_.at<double>(5, 8) = 0;
	break;
	case 3:
		JacobianNear_.at<double>(0, 0) = - sin(ph)*((153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3)*cos(q1) + y*sin(q2 + q3)*cos(q1)) - cos(ph)*((153*cos(q2)*sin(q1))/250 + z*cos(q1) - x*cos(q2 + q3)*sin(q1) + y*sin(q2 + q3)*sin(q1));
		JacobianNear_.at<double>(0, 1) = (cos(ph + q1)*(250*y*cos(q2 + q3) - 153*sin(q2) + 250*x*sin(q2 + q3)))/250;
		JacobianNear_.at<double>(0, 2) = cos(ph + q1)*(y*cos(q2 + q3) + x*sin(q2 + q3));
		JacobianNear_.at<double>(0, 3) = 0;
		JacobianNear_.at<double>(0, 4) = 0;
		JacobianNear_.at<double>(0, 5) = 0;
		JacobianNear_.at<double>(0, 6) = - sin(ph)*(a + (153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3)*cos(q1) + y*sin(q2 + q3)*cos(q1)) - cos(ph)*(b + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - x*cos(q2 + q3)*sin(q1) + y*sin(q2 + q3)*sin(q1));
		JacobianNear_.at<double>(0, 7) = 1;
		JacobianNear_.at<double>(0, 8) = 0;
		JacobianNear_.at<double>(1, 0) = cos(ph)*((153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3)*cos(q1) + y*sin(q2 + q3)*cos(q1)) - sin(ph)*((153*cos(q2)*sin(q1))/250 + z*cos(q1) - x*cos(q2 + q3)*sin(q1) + y*sin(q2 + q3)*sin(q1));
		JacobianNear_.at<double>(1, 1) = (sin(ph + q1)*(250*y*cos(q2 + q3) - 153*sin(q2) + 250*x*sin(q2 + q3)))/250;	
		JacobianNear_.at<double>(1, 2) = sin(ph + q1)*(y*cos(q2 + q3) + x*sin(q2 + q3));
		JacobianNear_.at<double>(1, 3) = 0;
		JacobianNear_.at<double>(1, 4) = 0;
		JacobianNear_.at<double>(1, 5) = 0;
		JacobianNear_.at<double>(1, 6) = cos(ph)*(a + (153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3)*cos(q1) + y*sin(q2 + q3)*cos(q1)) - sin(ph)*(b + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - x*cos(q2 + q3)*sin(q1) + y*sin(q2 + q3)*sin(q1));
		JacobianNear_.at<double>(1, 7) = 0;
		JacobianNear_.at<double>(1, 8) = 1;
		JacobianNear_.at<double>(2, 0) = 0;
		JacobianNear_.at<double>(2, 1) = x*cos(q2 + q3) - (153*cos(q2))/250 - y*sin(q2 + q3);
		JacobianNear_.at<double>(2, 2) = x*cos(q2 + q3) - y*sin(q2 + q3);
		JacobianNear_.at<double>(2, 3) = 0;
		JacobianNear_.at<double>(2, 4) = 0;
		JacobianNear_.at<double>(2, 5) = 0;
		JacobianNear_.at<double>(2, 6) = 0;
		JacobianNear_.at<double>(2, 7) = 0;
		JacobianNear_.at<double>(2, 8) = 0;
		JacobianNear_.at<double>(3, 0) = 0;
		JacobianNear_.at<double>(3, 1) = -sin(ph + q1); 
		JacobianNear_.at<double>(3, 2) = -sin(ph + q1);
		JacobianNear_.at<double>(3, 3) = 0;
		JacobianNear_.at<double>(3, 4) = 0;
		JacobianNear_.at<double>(3, 5) = 0;
		JacobianNear_.at<double>(3, 6) = 0;
		JacobianNear_.at<double>(3, 7) = 0;
		JacobianNear_.at<double>(3, 8) = 0;
		JacobianNear_.at<double>(4, 0) = 0;
		JacobianNear_.at<double>(4, 1) = -cos(ph + q1); 
		JacobianNear_.at<double>(4, 2) = -cos(ph + q1);
		JacobianNear_.at<double>(4, 3) = 0;
		JacobianNear_.at<double>(4, 4) = 0;
		JacobianNear_.at<double>(4, 5) = 0;
		JacobianNear_.at<double>(4, 6) = 0;
		JacobianNear_.at<double>(4, 7) = 0;
		JacobianNear_.at<double>(4, 8) = 0;
		JacobianNear_.at<double>(5, 0) = 1;
		JacobianNear_.at<double>(5, 1) = 0; 
		JacobianNear_.at<double>(5, 2) = 0;
		JacobianNear_.at<double>(5, 3) = 0;
		JacobianNear_.at<double>(5, 4) = 0;
		JacobianNear_.at<double>(5, 5) = 0;
		JacobianNear_.at<double>(5, 6) = 1;
		JacobianNear_.at<double>(5, 7) = 0;
		JacobianNear_.at<double>(5, 8) = 0;
	break;
	case 4:
		JacobianNear_.at<double>(0, 0) = sin(ph)*((1476649253021493*sin(q1))/9007199254740992 - (153*cos(q1)*cos(q2))/250 + z*sin(q1) + x*cos(q2 + q3 + q4)*cos(q1) - y*sin(q2 + q3 + q4)*cos(q1) - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - cos(ph)*((1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - x*cos(q2 + q3 + q4)*sin(q1) + y*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		JacobianNear_.at<double>(0, 1) = -(cos(ph + q1)*(5723*sin(q2 + q3) + 6120*sin(q2) - 10000*y*cos(q2 + q3 + q4) - 10000*x*sin(q2 + q3 + q4)))/10000;
		JacobianNear_.at<double>(0, 2) = (cos(ph + q1)*(10000*y*cos(q2 + q3 + q4) - 5723*sin(q2 + q3) + 10000*x*sin(q2 + q3 + q4)))/10000;	
		JacobianNear_.at<double>(0, 3) = cos(ph + q1)*(y*cos(q2 + q3 + q4) + x*sin(q2 + q3 + q4));
		JacobianNear_.at<double>(0, 4) = 0;
		JacobianNear_.at<double>(0, 5) = 0;
		JacobianNear_.at<double>(0, 6) = - sin(ph)*(a - (1476649253021493*sin(q1))/9007199254740992 + (153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3 + q4)*cos(q1) + y*sin(q2 + q3 + q4)*cos(q1) + (5723*cos(q1)*cos(q2)*cos(q3))/10000 - (5723*cos(q1)*sin(q2)*sin(q3))/10000) - cos(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - x*cos(q2 + q3 + q4)*sin(q1) + y*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		JacobianNear_.at<double>(0, 7) = 1;
		JacobianNear_.at<double>(0, 8) = 0;
		JacobianNear_.at<double>(1, 0) = - cos(ph)*((1476649253021493*sin(q1))/9007199254740992 - (153*cos(q1)*cos(q2))/250 + z*sin(q1) + x*cos(q2 + q3 + q4)*cos(q1) - y*sin(q2 + q3 + q4)*cos(q1) - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - sin(ph)*((1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - x*cos(q2 + q3 + q4)*sin(q1) + y*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		JacobianNear_.at<double>(1, 1) = -(sin(ph + q1)*(5723*sin(q2 + q3) + 6120*sin(q2) - 10000*y*cos(q2 + q3 + q4) - 10000*x*sin(q2 + q3 + q4)))/10000;
		JacobianNear_.at<double>(1, 2) = (sin(ph + q1)*(10000*y*cos(q2 + q3 + q4) - 5723*sin(q2 + q3) + 10000*x*sin(q2 + q3 + q4)))/10000;
		JacobianNear_.at<double>(1, 3) = sin(ph + q1)*(y*cos(q2 + q3 + q4) + x*sin(q2 + q3 + q4));
		JacobianNear_.at<double>(1, 4) = 0;
		JacobianNear_.at<double>(1, 5) = 0;
		JacobianNear_.at<double>(1, 6) = cos(ph)*(a - (1476649253021493*sin(q1))/9007199254740992 + (153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3 + q4)*cos(q1) + y*sin(q2 + q3 + q4)*cos(q1) + (5723*cos(q1)*cos(q2)*cos(q3))/10000 - (5723*cos(q1)*sin(q2)*sin(q3))/10000) - sin(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - x*cos(q2 + q3 + q4)*sin(q1) + y*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		JacobianNear_.at<double>(1, 7) = 0;
		JacobianNear_.at<double>(1, 8) = 1;
		JacobianNear_.at<double>(2, 0) = 0;
		JacobianNear_.at<double>(2, 1) = x*cos(q2 + q3 + q4) - (153*cos(q2))/250 - (5723*cos(q2 + q3))/10000 - y*sin(q2 + q3 + q4);
		JacobianNear_.at<double>(2, 2) = x*cos(q2 + q3 + q4) - (5723*cos(q2 + q3))/10000 - y*sin(q2 + q3 + q4);
		JacobianNear_.at<double>(2, 3) = x*cos(q2 + q3 + q4) - y*sin(q2 + q3 + q4);
		JacobianNear_.at<double>(2, 4) = 0;
		JacobianNear_.at<double>(2, 5) = 0;
		JacobianNear_.at<double>(2, 6) = 0;
		JacobianNear_.at<double>(2, 7) = 0;
		JacobianNear_.at<double>(2, 8) = 0;
		JacobianNear_.at<double>(3, 0) = 0;
		JacobianNear_.at<double>(3, 1) = -sin(ph + q1);
		JacobianNear_.at<double>(3, 2) = -sin(ph + q1);
		JacobianNear_.at<double>(3, 3) = -sin(ph + q1);
		JacobianNear_.at<double>(3, 4) = 0;
		JacobianNear_.at<double>(3, 5) = 0;
		JacobianNear_.at<double>(3, 6) = 0;
		JacobianNear_.at<double>(3, 7) = 0;
		JacobianNear_.at<double>(3, 8) = 0;
		JacobianNear_.at<double>(4, 0) = 0;
		JacobianNear_.at<double>(4, 1) = cos(ph + q1);
		JacobianNear_.at<double>(4, 2) = cos(ph + q1);
		JacobianNear_.at<double>(4, 3) = cos(ph + q1);
		JacobianNear_.at<double>(4, 4) = 0;
		JacobianNear_.at<double>(4, 5) = 0;
		JacobianNear_.at<double>(4, 6) = 0;
		JacobianNear_.at<double>(4, 7) = 0;
		JacobianNear_.at<double>(4, 8) = 0;
		JacobianNear_.at<double>(5, 0) = 1;
		JacobianNear_.at<double>(5, 1) = 0;
		JacobianNear_.at<double>(5, 2) = 0;
		JacobianNear_.at<double>(5, 3) = 0;
		JacobianNear_.at<double>(5, 4) = 0;
		JacobianNear_.at<double>(5, 5) = 0;
		JacobianNear_.at<double>(5, 6) = 1;
		JacobianNear_.at<double>(5, 7) = 0;
		JacobianNear_.at<double>(5, 8) = 0;
	break;
	case 5:
		JacobianNear_.at<double>(0, 0) = sin(ph)*((1476649253021493*sin(q1))/9007199254740992 - (153*cos(q1)*cos(q2))/250 + x*(sin(q1)*sin(q5) + cos(q2 + q3 + q4)*cos(q1)*cos(q5)) + y*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5)) + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 + z*sin(q2 + q3 + q4)*cos(q1) - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - cos(ph)*((1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + x*(cos(q1)*sin(q5) - cos(q2 + q3 + q4)*cos(q5)*sin(q1)) + y*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5)) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 - z*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		JacobianNear_.at<double>(0, 1) = -(cos(ph + q1)*(6120*sin(q2) + 5723*cos(q2)*sin(q3) + 5723*cos(q3)*sin(q2) + 1157*cos(q2 + q3)*cos(q4) + 10000*z*cos(q2 + q3 + q4) - 1157*sin(q2 + q3)*sin(q4) - 10000*x*sin(q2 + q3 + q4)*cos(q5) + 10000*y*sin(q2 + q3 + q4)*sin(q5)))/10000;
		JacobianNear_.at<double>(0, 2) = -(cos(ph + q1)*(5723*cos(q2)*sin(q3) + 5723*cos(q3)*sin(q2) + 1157*cos(q2 + q3)*cos(q4) + 10000*z*cos(q2 + q3 + q4) - 1157*sin(q2 + q3)*sin(q4) - 10000*x*sin(q2 + q3 + q4)*cos(q5) + 10000*y*sin(q2 + q3 + q4)*sin(q5)))/10000;
		JacobianNear_.at<double>(0, 3) = -(cos(ph + q1)*(1157*cos(q2 + q3)*cos(q4) + 10000*z*cos(q2 + q3 + q4) - 1157*sin(q2 + q3)*sin(q4) - 10000*x*sin(q2 + q3 + q4)*cos(q5) + 10000*y*sin(q2 + q3 + q4)*sin(q5)))/10000;
		JacobianNear_.at<double>(0, 4) = - cos(ph)*(x*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5)) - y*(sin(q1)*sin(q5) + cos(q2 + q3 + q4)*cos(q1)*cos(q5))) - sin(ph)*(x*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5)) - y*(cos(q1)*sin(q5) - cos(q2 + q3 + q4)*cos(q5)*sin(q1)));
		JacobianNear_.at<double>(0, 5) = 0;
		JacobianNear_.at<double>(0, 6) = sin(ph)*((1476649253021493*sin(q1))/9007199254740992 - a - (153*cos(q1)*cos(q2))/250 + x*(sin(q1)*sin(q5) + cos(q2 + q3 + q4)*cos(q1)*cos(q5)) + y*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5)) + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 + z*sin(q2 + q3 + q4)*cos(q1) - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - cos(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + x*(cos(q1)*sin(q5) - cos(q2 + q3 + q4)*cos(q5)*sin(q1)) + y*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5)) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 - z*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		JacobianNear_.at<double>(0, 7) = 1;
		JacobianNear_.at<double>(0, 8) = 0;
		JacobianNear_.at<double>(1, 0) = - cos(ph)*((1476649253021493*sin(q1))/9007199254740992 - (153*cos(q1)*cos(q2))/250 + x*(sin(q1)*sin(q5) + cos(q2 + q3 + q4)*cos(q1)*cos(q5)) + y*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5)) + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 + z*sin(q2 + q3 + q4)*cos(q1) - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - sin(ph)*((1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + x*(cos(q1)*sin(q5) - cos(q2 + q3 + q4)*cos(q5)*sin(q1)) + y*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5)) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 - z*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		JacobianNear_.at<double>(1, 1) = -(sin(ph + q1)*(6120*sin(q2) + 5723*cos(q2)*sin(q3) + 5723*cos(q3)*sin(q2) + 1157*cos(q2 + q3)*cos(q4) + 10000*z*cos(q2 + q3 + q4) - 1157*sin(q2 + q3)*sin(q4) - 10000*x*sin(q2 + q3 + q4)*cos(q5) + 10000*y*sin(q2 + q3 + q4)*sin(q5)))/10000;
		JacobianNear_.at<double>(1, 2) = -(sin(ph + q1)*(5723*cos(q2)*sin(q3) + 5723*cos(q3)*sin(q2) + 1157*cos(q2 + q3)*cos(q4) + 10000*z*cos(q2 + q3 + q4) - 1157*sin(q2 + q3)*sin(q4) - 10000*x*sin(q2 + q3 + q4)*cos(q5) + 10000*y*sin(q2 + q3 + q4)*sin(q5)))/10000;
		JacobianNear_.at<double>(1, 3) = -(sin(ph + q1)*(1157*cos(q2 + q3)*cos(q4) + 10000*z*cos(q2 + q3 + q4) - 1157*sin(q2 + q3)*sin(q4) - 10000*x*sin(q2 + q3 + q4)*cos(q5) + 10000*y*sin(q2 + q3 + q4)*sin(q5)))/10000;
		JacobianNear_.at<double>(1, 4) = cos(ph)*(x*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5)) - y*(cos(q1)*sin(q5) - cos(q2 + q3 + q4)*cos(q5)*sin(q1))) - sin(ph)*(x*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5)) - y*(sin(q1)*sin(q5) + cos(q2 + q3 + q4)*cos(q1)*cos(q5)));
		JacobianNear_.at<double>(1, 5) = 0;
		JacobianNear_.at<double>(1, 6) = - cos(ph)*((1476649253021493*sin(q1))/9007199254740992 - a - (153*cos(q1)*cos(q2))/250 + x*(sin(q1)*sin(q5) + cos(q2 + q3 + q4)*cos(q1)*cos(q5)) + y*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5)) + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 + z*sin(q2 + q3 + q4)*cos(q1) - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - sin(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + x*(cos(q1)*sin(q5) - cos(q2 + q3 + q4)*cos(q5)*sin(q1)) + y*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5)) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 - z*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		JacobianNear_.at<double>(1, 7) = 0;
		JacobianNear_.at<double>(1, 8) = 1;
		JacobianNear_.at<double>(2, 0) = 0;
		JacobianNear_.at<double>(2, 1) = (1157*sin(q2 + q3 + q4))/10000 - (5723*cos(q2 + q3))/10000 - (153*cos(q2))/250 + z*sin(q2 + q3 + q4) + x*cos(q2 + q3 + q4)*cos(q5) - y*cos(q2 + q3 + q4)*sin(q5);
		JacobianNear_.at<double>(2, 2) = (1157*sin(q2 + q3 + q4))/10000 - (5723*cos(q2 + q3))/10000 + z*sin(q2 + q3 + q4) + x*cos(q2 + q3 + q4)*cos(q5) - y*cos(q2 + q3 + q4)*sin(q5);
		JacobianNear_.at<double>(2, 3) = (1157*sin(q2 + q3 + q4))/10000 + z*sin(q2 + q3 + q4) + x*cos(q2 + q3 + q4)*cos(q5) - y*cos(q2 + q3 + q4)*sin(q5);
		JacobianNear_.at<double>(2, 4) = -sin(q2 + q3 + q4)*(y*cos(q5) + x*sin(q5));
		JacobianNear_.at<double>(2, 5) = 0;
		JacobianNear_.at<double>(2, 6) = 0;
		JacobianNear_.at<double>(2, 7) = 0;
		JacobianNear_.at<double>(2, 8) = 0;
		JacobianNear_.at<double>(3, 0) = 0;
		JacobianNear_.at<double>(3, 1) = -sin(ph + q1);
		JacobianNear_.at<double>(3, 2) = -sin(ph + q1);
		JacobianNear_.at<double>(3, 3) = -sin(ph + q1);
		JacobianNear_.at<double>(3, 4) = -sin(q2 + q3 + q4)*cos(ph + q1);
		JacobianNear_.at<double>(3, 5) = 0;
		JacobianNear_.at<double>(3, 6) = 0;
		JacobianNear_.at<double>(3, 7) = 0;
		JacobianNear_.at<double>(3, 8) = 0;
		JacobianNear_.at<double>(4, 0) = 0;
		JacobianNear_.at<double>(4, 1) = cos(ph + q1);
		JacobianNear_.at<double>(4, 2) = cos(ph + q1);
		JacobianNear_.at<double>(4, 3) = cos(ph + q1);
		JacobianNear_.at<double>(4, 4) = -sin(q2 + q3 + q4)*sin(ph + q1);
		JacobianNear_.at<double>(4, 5) = 0;
		JacobianNear_.at<double>(4, 6) = 0;
		JacobianNear_.at<double>(4, 7) = 0;
		JacobianNear_.at<double>(4, 8) = 0;
		JacobianNear_.at<double>(5, 0) = 1;
		JacobianNear_.at<double>(5, 1) = 0;
		JacobianNear_.at<double>(5, 2) = 0;
		JacobianNear_.at<double>(5, 3) = 0;
		JacobianNear_.at<double>(5, 4) = -cos(q2 + q3 + q4);
		JacobianNear_.at<double>(5, 5) = 0;
		JacobianNear_.at<double>(5, 6) = 1;
		JacobianNear_.at<double>(5, 7) = 0;
		JacobianNear_.at<double>(5, 8) = 0;
	break;
	}
	JacobianNear = JacobianNear_;
}

void JacobianPoint::calcJacobianStar()
{
	cv::Mat I9 = cv::Mat::eye(9, 9, CV_64FC1);
	cv::Mat JacobianStar_(6, 9, CV_64FC1);
    JacobianWhole_pi = cv::Mat(9, 6, CV_64FC1);
    JacobianWhole_2 = cv::Mat(6, 6, CV_64FC1);
	JacobianWhole_2 = JacobianWhole*JacobianWhole.t();
	JacobianWhole_pi = JacobianWhole.t()*JacobianWhole_2.inv();
	JacobianStar_ = JacobianNear*(I9 - JacobianWhole_pi*JacobianWhole);
	JacobianStar = JacobianStar_;
}

double JacobianPoint::calcDistanceToObstacle(double x_o, double y_o, double z_o)
{
switch(num){
    case 0:
        x_world = x0 + cos(ph)*x - sin(ph)*y;
        y_world = y0 + sin(ph)*x + cos(ph)*y;
        z_world = z;
    break;
	case 1:
		x_world = x0 + cos(ph)*(a - x*cos(q1) + y*sin(q1)) + sin(ph)*(y*cos(q1) - b + x*sin(q1));
		y_world = y0 + sin(ph)*(a - x*cos(q1) + y*sin(q1)) - cos(ph)*(y*cos(q1) - b + x*sin(q1));
		z_world = c + z + 1273/10000;
 	break;
	case 2:
		x_world = x0 + cos(ph)*(a - z*sin(q1) - x*cos(q1)*cos(q2) + y*cos(q1)*sin(q2)) - sin(ph)*(b + z*cos(q1) - x*cos(q2)*sin(q1) + y*sin(q1)*sin(q2));
		y_world = y0 + sin(ph)*(a - z*sin(q1) - x*cos(q1)*cos(q2) + y*cos(q1)*sin(q2)) + cos(ph)*(b + z*cos(q1) - x*cos(q2)*sin(q1) + y*sin(q1)*sin(q2));
		z_world = c + y*cos(q2) + x*sin(q2) + 1273/10000;
	break;
	case 3:
		x_world = x0 + cos(ph)*(a + (153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3)*cos(q1) + y*sin(q2 + q3)*cos(q1)) - sin(ph)*(b + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - x*cos(q2 + q3)*sin(q1) + y*sin(q2 + q3)*sin(q1));
		y_world = y0 + sin(ph)*(a + (153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3)*cos(q1) + y*sin(q2 + q3)*cos(q1)) + cos(ph)*(b + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - x*cos(q2 + q3)*sin(q1) + y*sin(q2 + q3)*sin(q1));
		z_world = c - (153*sin(q2))/250 + y*cos(q2 + q3) + x*sin(q2 + q3) + 1273/10000;
	break;
	case 4:
		x_world = x0 + cos(ph)*(a - (1476649253021493*sin(q1))/9007199254740992 + (153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3 + q4)*cos(q1) + y*sin(q2 + q3 + q4)*cos(q1) + (5723*cos(q1)*cos(q2)*cos(q3))/10000 - (5723*cos(q1)*sin(q2)*sin(q3))/10000) - sin(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - x*cos(q2 + q3 + q4)*sin(q1) + y*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		y_world = y0 + sin(ph)*(a - (1476649253021493*sin(q1))/9007199254740992 + (153*cos(q1)*cos(q2))/250 - z*sin(q1) - x*cos(q2 + q3 + q4)*cos(q1) + y*sin(q2 + q3 + q4)*cos(q1) + (5723*cos(q1)*cos(q2)*cos(q3))/10000 - (5723*cos(q1)*sin(q2)*sin(q3))/10000) + cos(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + z*cos(q1) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - x*cos(q2 + q3 + q4)*sin(q1) + y*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		z_world = c - (5723*sin(q2 + q3))/10000 - (153*sin(q2))/250 + y*cos(q2 + q3 + q4) + x*sin(q2 + q3 + q4) + 1273/10000;
	break;
	case 5:
		x_world = x0 - cos(ph)*((1476649253021493*sin(q1))/9007199254740992 - a - (153*cos(q1)*cos(q2))/250 + x*(sin(q1)*sin(q5) + cos(q2 + q3 + q4)*cos(q1)*cos(q5)) + y*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5)) + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 + z*sin(q2 + q3 + q4)*cos(q1) - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) - sin(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + x*(cos(q1)*sin(q5) - cos(q2 + q3 + q4)*cos(q5)*sin(q1)) + y*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5)) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 - z*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		y_world = y0 - sin(ph)*((1476649253021493*sin(q1))/9007199254740992 - a - (153*cos(q1)*cos(q2))/250 + x*(sin(q1)*sin(q5) + cos(q2 + q3 + q4)*cos(q1)*cos(q5)) + y*(cos(q5)*sin(q1) - cos(q2 + q3 + q4)*cos(q1)*sin(q5)) + (1157*cos(q2 + q3)*cos(q1)*sin(q4))/10000 + (1157*sin(q2 + q3)*cos(q1)*cos(q4))/10000 + z*sin(q2 + q3 + q4)*cos(q1) - (5723*cos(q1)*cos(q2)*cos(q3))/10000 + (5723*cos(q1)*sin(q2)*sin(q3))/10000) + cos(ph)*(b + (1476649253021493*cos(q1))/9007199254740992 + (153*cos(q2)*sin(q1))/250 + x*(cos(q1)*sin(q5) - cos(q2 + q3 + q4)*cos(q5)*sin(q1)) + y*(cos(q1)*cos(q5) + cos(q2 + q3 + q4)*sin(q1)*sin(q5)) - (5723*sin(q1)*sin(q2)*sin(q3))/10000 - (1157*cos(q2 + q3)*sin(q1)*sin(q4))/10000 - (1157*sin(q2 + q3)*cos(q4)*sin(q1))/10000 - z*sin(q2 + q3 + q4)*sin(q1) + (5723*cos(q2)*cos(q3)*sin(q1))/10000);
		z_world = c - (1157*cos(q2 + q3 + q4))/10000 - (5723*sin(q2 + q3))/10000 - (153*sin(q2))/250 - z*cos(q2 + q3 + q4) + x*sin(q2 + q3 + q4)*cos(q5) - y*sin(q2 + q3 + q4)*sin(q5) + 1273/10000;
	break;
	}
distance = sqrt((x_world - x_o)*(x_world - x_o) + (y_world - y_o)*(y_world - y_o) + (z_world - z_o)*(z_world - z_o));
x1 = 1.0/distance;
x2 = (x_world - x_o)/distance;
x3 = (y_world - y_o)/distance;
x4 = (z_world - z_o)/distance;
return distance;
}

void JacobianPoint::calcAngularVelocities(double w1, double w2, double w3, double w4, double w5, double w6, double w7, double w8, double w9)
{
    cv::Mat w_vec = cv::Mat(9, 1, CV_64FC1);
    cv::Mat dq_vec = cv::Mat(9, 1, CV_64FC1);
    w_vec.at<double>(0, 0) = w1;
    w_vec.at<double>(1, 0) = w2;
    w_vec.at<double>(2, 0) = w3;
    w_vec.at<double>(3, 0) = w4;
    w_vec.at<double>(4, 0) = w5;
    w_vec.at<double>(5, 0) = w6;
    w_vec.at<double>(6, 0) = w7;
    w_vec.at<double>(7, 0) = w8;
    w_vec.at<double>(8, 0) = w9;
    cv::Mat I9 = cv::Mat::eye(9, 9, CV_64FC1);
    dq_vec = (I9 - JacobianWhole_pi*JacobianWhole)*w_vec;
    dq1 = dq_vec.at<double>(0, 0);
    dq2 = dq_vec.at<double>(1, 0);
    dq3 = dq_vec.at<double>(2, 0);
    dq4 = dq_vec.at<double>(3, 0);
    dq5 = dq_vec.at<double>(4, 0);
    dq6 = dq_vec.at<double>(5, 0);
    dph = dq_vec.at<double>(6, 0);
    dx0 = dq_vec.at<double>(7, 0);
    dy0 = dq_vec.at<double>(8, 0);
}
